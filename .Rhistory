theme_clean()
ind_map2 <- ggplot(plot.data[plot.data$pct_65 < .6,]) +
geom_polygon(aes(fill = pct_65, x = long, y = lat, group = group), col = "black", size = 0.025) +
scale_fill_distiller(palette = "YlOrRd", direction = 1, name = "% of Population\n Over 65") +
theme_clean()
grid.arrange(ind_map1, ind_map2, nrow=1)
ind_map3 <- ggplot(plot.data[plot.data$gis_acres < 1,]) +
geom_polygon(aes(fill = gis_acres, x = long, y = lat, group = group), col = "black", size = 0.025) +
scale_fill_distiller(palette = "YlOrRd", direction = 1, name = "Average Lot Size\n (Acres)") +
theme_clean()
ind_map4 <- ggplot(plot.data) +
geom_polygon(aes(fill = density, x = long, y = lat, group = group), col = "black", size = 0.025) +
scale_fill_distiller(palette = "YlOrRd", direction = 1, name = "Density \n (SFR Buildings / Acre)") +
theme_clean()
grid.arrange(ind_map3, ind_map4, nrow=1)
ind_map3 <- ggplot(plot.data[plot.data$gis_acres < .75,]) +
geom_polygon(aes(fill = gis_acres, x = long, y = lat, group = group), col = "black", size = 0.025) +
scale_fill_distiller(palette = "YlOrRd", direction = 1, name = "Average Lot Size\n (Acres)") +
theme_clean()
ind_map4 <- ggplot(plot.data) +
geom_polygon(aes(fill = density, x = long, y = lat, group = group), col = "black", size = 0.025) +
scale_fill_distiller(palette = "YlOrRd", direction = 1, name = "Density \n (SFR Buildings / Acre)") +
theme_clean()
grid.arrange(ind_map3, ind_map4, nrow=1)
scatter1 <- ggplot(cbg_redu@data, aes(bldgsqft,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Average Building Size (Sq.Ft.)", y = "Energy Expenditure ($/yr/hh)")
scatter2 <- ggplot(cbg_redu@data, aes(Med_Yr_Bui,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Median Building Age (Year)", y = "Energy Expenditure ($/yr/hh)")
scatter3 <- ggplot(cbg_redu@data[cbg_redu@data$gis_acres < 1,], aes(gis_acres,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Lot Size (Acres)", y = "Energy Expenditure ($/yr/hh)")
scatter4 <- ggplot(cbg_redu@data, aes(Avg_HHSize,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Average Household Size (# of People)", y = "Energy Expenditure ($/yr/hh)")
scatter5 <- ggplot(cbg_redu@data, aes(Pct_Educated,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% of Population With Higher Education", y = "Energy Expenditure ($/yr/hh)")
scatter6 <- ggplot(cbg_redu@data, aes(MHI,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("Median Household Income ($)")), y = "Energy Expenditure ($/yr/hh)")
scatter7 <- ggplot(cbg_redu@data, aes(pct_white,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% White Population", y = "Energy Expenditure ($/yr/hh)")
scatter8 <- ggplot(cbg_redu@data, aes(pct_black,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% Black Population", y = "Energy Expenditure ($/yr/hh)")
scatter9 <- ggplot(cbg_redu@data, aes(pct_hisp,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("% Hispanic Population")), y = "Energy Expenditure ($/yr/hh)")
scatter10 <- ggplot(cbg_redu@data, aes(density,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Building Density (SFR Units / Acre)", y = "Energy Expenditure ($/yr/hh)")
scatter11 <- ggplot(cbg_redu@data, aes(pct_rent,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% Renter Population", y = "Energy Expenditure ($/yr/hh)")
scatter12 <- ggplot(cbg_redu@data, aes(pct_u18,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% of Population Under 18", y = "Energy Expenditure ($/yr/hh)")
scatter13 <- ggplot(cbg_redu@data, aes(pct_65,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% of Population Over 65", y = "Energy Expenditure ($/yr/hh)")
scatter14 <- ggplot(cbg_redu@data, aes(am,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("Average Morning Temperature (",degree,"C)")), y = "Energy Expenditure ($/yr/hh)")
scatter15 <- ggplot(cbg_redu@data, aes(af,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("Average Afternoon Temperature (",degree,"C)")), y = "Energy Expenditure ($/yr/hh)")
scatter16 <- ggplot(cbg_redu@data, aes(pm,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("Average Evening Temperature (",degree,"C)")), y = "Energy Expenditure ($/yr/hh)")
grid.arrange(scatter1, scatter2, scatter3, scatter4, scatter5, scatter6,
scatter7, scatter8, scatter9, scatter10, scatter11, scatter12,
scatter13, scatter14, scatter15, scatter16, nrow=4)
16/6
grid.arrange(scatter1, scatter2, scatter3, scatter4, scatter5, scatter6,
scatter7, scatter8, scatter9, scatter10, scatter11, scatter12,
scatter13, scatter14, scatter15, scatter16, nrow=6)
scatter1 <- ggplot(cbg_redu@data, aes(bldgsqft,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Average Building Size (Sq.Ft.)", y = "Energy Expenditure ($/yr/hh)")
scatter2 <- ggplot(cbg_redu@data, aes(Med_Yr_Bui,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Median Building Age (Year)", y = "Energy Expenditure ($/yr/hh)")
scatter3 <- ggplot(cbg_redu@data[cbg_redu@data$gis_acres < 1,], aes(gis_acres,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Lot Size (Acres)", y = "Energy Expenditure ($/yr/hh)")
scatter4 <- ggplot(cbg_redu@data, aes(Avg_HHSize,exp_norm15)) +
geom_point(size=1.5) +
labs(x="Average Household Size (# of People)", y = "Energy Expenditure ($/yr/hh)")
scatter5 <- ggplot(cbg_redu@data, aes(Pct_Educated,exp_norm15)) +
geom_point(size=1.5) +
labs(x="% of Population With Higher Education", y = "Energy Expenditure ($/yr/hh)")
scatter6 <- ggplot(cbg_redu@data, aes(MHI,exp_norm15)) +
geom_point(size=1.5) +
labs(x=expression(paste("Median Household Income ($)")), y = "Energy Expenditure ($/yr/hh)")
grid.arrange(scatter1, scatter2, scatter3, scatter4, scatter5, scatter6, nrow=2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
library(ggplot2)
library(pander)
library(sf)
library(spdep)
library(rgdal)
library(car)
library(corrplot)
library(gridExtra)
library(stargazer) # outputs nice looking tables
library(GGally)
options(stringsAsFactors = FALSE)
panderOptions('round', 4)
panderOptions('digits', 4)
cbg <- readOGR("/Users/Alec Trusty/Dropbox/SUPR_SFR_EE/Data/pdx_cbg/euf_cbg_1072019.shp")
cbg_raw <- readOGR("/Users/Alec Trusty/Dropbox/SUPR_SFR_EE/Data/pdx_cbg/euf_cbg_1072019.shp")
cbg <- subset(cbg, !is.na(cbg$X)) # removes block groups with no UHI data
cbg$Avg_HHSize <- cbg$AVG_HHSIZE
cbg$Med_Yr_Bui <- cbg$med_yr_bui # calculated from our data
cbg$TotPop <- cbg$TOTPOP
cbg$Pop_Under1 <- cbg$POPUND18
cbg$Pop_65Over <- cbg$POPOVR65
cbg$H_Units <- cbg$H_UNITS
cbg$Pop_White <- cbg$POPWHITE
cbg$Pop_Black <- cbg$POPBLACK
cbg$Pop_Hisp <- cbg$POPHISP
cbg$Pop_Native <- cbg$POPNATIVE
cbg$count <- cbg$sfr_nt
# Need to fix some data types before moving forward
cbg@data$Med_Yr_Bui <- as.numeric(cbg@data$Med_Yr_Bui)
#cbg@data$Pop_Under5 <- as.numeric(cbg@data$Pop_Under5)
cbg@data$Pop_Under1 <- as.numeric(cbg@data$Pop_Under1)
cbg@data$Pop_65Over <- as.numeric(cbg@data$Pop_65Over)
cbg@data$Pop_Native <- as.numeric(cbg@data$Pop_Native)
cbg$exp_norm15 <- cbg$sum_exp16 / cbg$count
# Remove very large and small block groups, and those with few SFR Buildings
cbg$cbg_area <- sapply(slot(cbg, "polygons"), slot, "area") # create an area field
cbg <- subset(cbg, cbg$cbg_area < 5.0e+07 & cbg$cbg_area > 1e+06) #visually remove the large and very small block groups
cbg <- subset(cbg, cbg$sfr_nt > 40) # subset CBGs with less than 40 SFR (As Chang et al did)
# Remove expenditure outliers
exp_outlier <- max(boxplot.stats(cbg@data$exp_norm15)$out)
cbg <- subset(cbg, cbg$exp_norm15 > exp_outlier)
#cbg <- subset(cbg, cbg$exp_norm15 > 1100 & cbg$exp_norm15 < 2200) # used boxplot statistics to remove blockgroups with outlying expenditures
# Remove spatial outliers
cbg <- subset(cbg, !(cbg@data$fips == "410510072012") & !(cbg@data$fips == "410050232021"))
# Note: the remaining apparent slivers are part of larger block groups that still
# meet the above criteria
medePuter <- function(x){
x<-as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] <- median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
# Make a table of counts -- 10 in MHI, 1 in Med_Yr_Built
colSums(is.na(cbg@data))
# Impute median values into missing data
cbg@data <- as.data.frame(apply(cbg@data,2,medePuter))
cbg_redu <- cbg # renaming reduced dataset
cbg_redu$density <- cbg_redu$count/cbg_redu$cbg_area
#cbg_redu$exp_normarea <- cbg_redu$sum_exp16/cbg_redu$cbg_area
cbg_redu$Pct_Educated <- cbg_redu$GT25_GTBA / cbg_redu$TotPop
cbg_redu$pct_black <- cbg_redu$Pop_Black/cbg_redu$TotPop
cbg_redu$pct_white <- cbg_redu$Pop_White/cbg_redu$TotPop
cbg_redu$pct_hisp <- cbg_redu$Pop_Hisp/cbg_redu$TotPop
cbg_redu$pct_65 <- cbg_redu$Pop_65Over/cbg_redu$TotPop
cbg_redu$pct_u18 <- cbg_redu$Pop_Under1/cbg_redu$TotPop
#cbg_redu$pct_rent <- (cbg_redu$TotPop - cbg_redu$OOHU) / cbg_redu$TotPop
#cbg_redu$pct_rent <- (cbg_redu$H_Units - cbg_redu$OOHU) / cbg_redu$H_Units
cbg_redu$pct_rent <- cbg_redu$PCTRENT
names(cbg_redu)
names(cbg_redu)
corvars <- c("exp_norm15", "bldgsqft", "Med_Yr_Bui", "gis_acres",
"AVg_HHSize", "Pct_Educated", "MHI", "pct_white",
"pct_black", "pct_hisp", "density", "pct_rent",
"pct_u18", "pct_65", "am", "af", "pm")
cordf <- cbg_redu[,corvars]
corvars <- c("exp_norm15", "bldgsqft", "Med_Yr_Bui", "gis_acres",
"AVg_HHSize", "Pct_Educated", "MHI", "pct_white",
"pct_black", "pct_hisp", "density", "pct_rent",
"pct_u18", "pct_65", "am", "af", "pm")
!(corvars %in% colnames(cbg_redu))
cbg_redu <- cbg # renaming reduced dataset
cbg_redu$density <- cbg_redu$count/cbg_redu$cbg_area
#cbg_redu$exp_normarea <- cbg_redu$sum_exp16/cbg_redu$cbg_area
cbg_redu$Pct_Educated <- cbg_redu$GT25_GTBA / cbg_redu$TotPop
cbg_redu$pct_black <- cbg_redu$Pop_Black/cbg_redu$TotPop
cbg_redu$pct_white <- cbg_redu$Pop_White/cbg_redu$TotPop
cbg_redu$pct_hisp <- cbg_redu$Pop_Hisp/cbg_redu$TotPop
cbg_redu$pct_65 <- cbg_redu$Pop_65Over/cbg_redu$TotPop
cbg_redu$pct_u18 <- cbg_redu$Pop_Under1/cbg_redu$TotPop
#cbg_redu$pct_rent <- (cbg_redu$TotPop - cbg_redu$OOHU) / cbg_redu$TotPop
#cbg_redu$pct_rent <- (cbg_redu$H_Units - cbg_redu$OOHU) /
cbg_redu$pct_rent <- cbg_redu$PCTRENT
cordf <- cbg_redu[,corvars]
corvars <- c("exp_norm15", "bldgsqft", "Med_Yr_Bui", "gis_acres",
"AVg_HHSize", "Pct_Educated", "MHI", "pct_white",
"pct_black", "pct_hisp", "density", "pct_rent",
"pct_u18", "pct_65", "am", "af", "pm")
names(cbg_redu)
!(colnames(cbg_redu) %in% corvars)
corvars[!(colnames(cbg_redu) %in% corvars)]
corvars[!(corvars %in% colnames(cbg_redu))]
names(cbg_redu)
corvars <- c("exp_norm15", "bldgsqft", "Med_Yr_Bui", "gis_acres",
"Avg_HHSize", "Pct_Educated", "MHI", "pct_white",
"pct_black", "pct_hisp", "density", "pct_rent",
"pct_u18", "pct_65", "am", "af", "pm")
cor(cordf)
cordf <- cbg_redu[,corvars]
cor(cordf, method = "pearson")
cordf <- as.data.frame(cbg_redu[,corvars])
cor(cordf, method = "pearson")
library(Hmisc)
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
round(cor(cordf, method = "pearson"), 2)
pander(round(cor(cordf, method = "pearson"), 2))
?cor
#Attempting to calculate Local Moran's I from some online resources: http://rstudio-pubs-static.s3.amazonaws.com/4938_b5fc230d586c48b291627ff6ea484d2e.html
cbg <- cbg_redu
# create row-standardized contiguity weights matrix
pdx_nb <- poly2nb(cbg)
pdx_nb_w <- nb2listw(pdx_nb)
#calculate local moran's I
locm <- localmoran(cbg@data$exp_norm15, pdx_nb_w)
# No idea what this output is yet
#summary(locm)
mor <- moran(cbg@data$exp_norm15, pdx_nb_w)
cbg <- cbg_redu
# create row-standardized contiguity weights matrix
pdx_nb <- poly2nb(cbg)
pdx_nb_w <- nb2listw(pdx_nb)
#calculate local moran's I
locm <- localmoran(cbg@data$exp_norm15, pdx_nb_w)
mor <- moran(cbg@data$exp_norm15, pdx_nb_w)
#calculate local moran's I
locm <- localmoran(cbg@data$exp_norm15, pdx_nb_w)
mor <- moran.test(cbg@data$exp_norm15, pdx_nb_w)
mor
# No idea what this output is yet
#summary(locm)
paste("Moran's I:", mor)
# No idea what this output is yet
#summary(locm)
paste("Moran's I:", mor$statistic)
# No idea what this output is yet
#summary(locm)
paste("Moran's I:", mor$estimate)
# No idea what this output is yet
#summary(locm)
paste("Moran's I:", mor$estimate[1])
#test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/WDPA_Arctic_Subset/WDPA_Arctic_Subset.shp")
#test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/AMSAIIC_Dataset.shp")
test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/WDPA_Clipped2AMAP_USA.shp")
library(rgdal)
library(leaflet)
library(sf)
#> Linking to GEOS 3.6.2, GDAL 2.2.4, proj.4 5.0.1
track_line <-
'LINESTRING (-169.4444 62.57549, -169.8999 62.31869, -170.4738 62.16436, -170.6529 61.4344, -171.7103 60.5111, -173.5295 60.78438, -175.2325 61.55942, -176.0107 61.88525, -177.1819 61.43621, -177.3077 61.25797, -177.3493 61.98553, -176.4385 62.26207, -177.3228 62.73083, -179.2457 62.84639, 179.7168 62.67369, 179.8549 62.58532, 179.8978 62.60145, -179.7893 62.64932, 179.9897 62.37538, -179.6393 62.66016, -179.8876 62.60982, -179.68 62.75012, 179.8264 62.78815, -179.789 62.72092, 179.6381 62.48176)'
track_line <- sf::st_as_sfc(track_line) %>%
sf::st_set_crs(4326)
# Krista's basemap: http://arcgis.research.pdx.edu/arcgis/rest/services/geog_484_584/Fanucchi_OCBasemap_2_10_17/MapServer
# Other Arctic Basemap: http://arcgis.research.pdx.edu/arcgis/rest/services/geog_484_584/OCBasemap_Final/MapServer
tile_url <- 'https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer/tile/{z}/{y}/{x}.png'
origin <- c(-2.8567784109255e+07, 3.2567784109255e+07)
minZoom <- 0
maxZoom <- 24
resolutions <- c(
238810.813354,119405.406677, 59702.7033384999, 29851.3516692501,14925.675834625,
7462.83791731252,3731.41895865639, 1865.70947932806,932.854739664032,
466.427369832148, 233.213684916074, 116.60684245803701, 58.30342122888621,
29.151710614575396, 14.5758553072877, 7.28792765351156, 3.64396382688807,
1.82198191331174, 0.910990956788164, 0.45549547826179, 0.227747739130895,
0.113873869697739, 0.05693693484887, 0.028468467424435
)
epsg5936 <- leafletCRS(
crsClass = 'L.Proj.CRS',
code = 'EPSG:5936',
proj4def = '+proj=stere +lat_0=90 +lat_ts=90 +lon_0=-150 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs',
origin = origin,
resolutions = resolutions
)
#test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/WDPA_Arctic_Subset/WDPA_Arctic_Subset.shp")
#test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/AMSAIIC_Dataset.shp")
test <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/WDPA_Clipped2AMAP_USA.shp")
test2 <- test[1:50,]
test@proj4string
pal <- colorNumeric(palette = "YlOrRd", domain = test$GIS_AREA)
popup <- paste0("<strong>MPA Name: </strong>",
test$NAME,
"<br><strong>Size: </strong>",
round(test$GIS_AREA, 2),
"<br><strong>IUCN Category: </strong>",
test$IUCN_CAT)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup) %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup) %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = "MPA Polygon",
options = layersControlOptions(collapsed = FALSE)
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = "MPA",
options = layersControlOptions(collapsed = FALSE)
)
amsa <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/AMSAIIC_Dataset.shp")
amsaProj <- spTransform(amsa,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
leaflet(amsaProj, options=leafletOptions(crs=epsg5936)) %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6)
leaflet(amsaProj, options=leafletOptions(crs=epsg5936)) %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6) %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
)
amsa <- readOGR("D:/Program Files (x86)/Github/arctic-mpa-explorer/Shapefiles/AMSAIIC_US_Selection.shp")
amsaProj <- spTransform(amsa,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
leaflet(amsaProj, options=leafletOptions(crs=epsg5936)) %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6) %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", group = "AMSAIIC")
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", group = "AMSAIIC") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", group = "AMSAIIC") %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", group = "AMSAIIC") %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", group = "AMSAIIC") %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("AMSAIIC")
names(amsa)
View(amsa)
head(amsa)
head(amsaProj@data)
popup2 <- paste0("<strong>AMSA Name: </strong>",
amsaProj$AMSA_NAME,
"<br><strong>: </strong>",
amsaProj$LME_NAME_1,
"<br><strong>Species: </strong>",
amsaProj$Species,
"<br><strong>Significance: </strong>",
amsaProj$Significan,)
popup2 <- paste0("<strong>AMSA Name: </strong>",
amsaProj$AMSA_NAME,
"<br><strong>: </strong>",
amsaProj$LME_NAME_1,
"<br><strong>Species: </strong>",
amsaProj$Species,
"<br><strong>Significance: </strong>",
amsaProj$Significan)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", popup = popup2, group = "AMSAIIC") %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("AMSAIIC")
names(test)
View(test@data)
popup1 <- paste0("<strong>MPA Name: </strong>",
test$NAME,
"<br><strong>Size: </strong>",
round(test$GIS_AREA, 2),
"<br><strong>IUCN Category: </strong>",
test$IUCN_CAT,
"<br><strong>Designation: </strong>",
test$DESIG,
"<br><strong>Government Type: </strong>",
test$GOV_TYPE,
"<br><strong>Management Authority: </strong>",
test$MANG_AUTH)
leaflet(test,
options= leafletOptions(
crs=epsg5936)) %>%
addGraticule() %>%
addPolygons(data = amsaProj, weight = 1, fillOpacity = 0.6,
fillColor = "lightgreen", color = "#BDBDC3", popup = popup2, group = "AMSAIIC") %>%
addPolygons(data = test, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(GIS_AREA), color = "#BDBDC3", popup = popup1, group = "MPA") %>%
leaflet.esri::addEsriTiledMapLayer(
"https://services.arcgisonline.com/arcgis/rest/services/Polar/Arctic_Ocean_Base/MapServer"
) %>%
addLayersControl(
overlayGroups = c("MPA", "AMSAIIC"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("MPA")
popup2 <- paste0("<strong>AMSA Name: </strong>",
amsaProj$AMSA_NAME,
"<br><strong>LME Name: </strong>",
amsaProj$LME_NAME_1,
"<br><strong>Species: </strong>",
amsaProj$Species,
"<br><strong>Significance: </strong>",
amsaProj$Significan)
shiny::runApp('D:/Program Files (x86)/Github/PDX_Housing_Dashboard')
gc()
shiny::runApp('D:/Program Files (x86)/Github/pdx-housing-dashboard')
shiny::runApp('D:/Program Files (x86)/Github/pdx-housing-dashboard')
runApp('D:/Program Files (x86)/Github/pdx-housing-dashboard')
library(rsconnect)
setwd("D:/Program Files (x86)/Github/pdx-housing-dashboard/")
deployApp()
